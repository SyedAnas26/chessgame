<!--
   Copyright 1999-2004 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->


<project name="My Project - Syed" default="compile" basedir=".">


    <!-- Property Definitions

         Each of the following properties are used by convention in this
         build file.  The values specified can be overridden at run time by
         adding a "-Dname=value" argument to the command line that invokes Ant.
         This technique is normally used to copy the values of the ANT_HOME
         and TOMCAT_HOME environment variables into the "ant.home" and
         "tomcat.home" properties, which are normally not defined explicitly.

         app.name          Base name of this application, used to
                           construct filenames and directories.

         deploy.home       The name of the directory into which the
                           deployment hierarchy will be created.
                           Normally, this will be the name of a
                           subdirectory under $TOMCAT_HOME/webapps.

         dist.home	       The name of the base directory in which
                           distribution files are created.

         dist.src          The name of the distribution JAR file
                           containing the application source code,
                           to be stored in the "dist.home" directory.
                           This filename should end with ".jar".

         dist.war          The name of the Web ARchive (WAR) file
                           containing our deployable application.
                           This filename should end with ".war".

         javadoc.home      The name of the base directory in which
                           the JavaDoc documentation for this application
                           is generated.

         tomcat.home       The name of the base directory in which
                           Tomcat has been installed.  This value is
                           normally set automatically from the value
                           of the TOMCAT_HOME environment variable.

         In the example below, the application being developed will be deployed
         to a subdirectory named "myapp", and will therefore be accessible at:

           http://localhost:8080/myapp
    -->

    <property name="app.name"       value="chessgame"/>
    <property name="deploy.home"    value="C:\\Users\\User\\Desktop\\Saddique\\apache-tomcat-9.0.36\\webapps\\ROOT\\"/>
    <property name="catalina.home"  value="C:\\Users\\User\\Desktop\\Saddique\\apache-tomcat-9.0.36"/>
    <property name="dist.home"      value="C:\\Users\\User\\Desktop\\Saddique\\GitHub\\chessgame"/>
    <property name="dist.src"       value="chess.jar"/>
    <property name="dist.war"       value="chess.war"/>


    <!-- The "prepare" target is used to construct the deployment home
         directory structure (if necessary), and to copy in static files
         as required.  In the example below, Ant is instructed to create
         the deployment directory, copy the contents of the "web/" source
         hierarchy, and set up the WEB-INF subdirectory appropriately.
    -->

    <target name="prepare">
        <mkdir  dir="${deploy.home}"/>
        <copy todir="${deploy.home}">
            <fileset dir="src/WebServerletLogic/OpenChess"/>
        </copy>
        <copy todir="${deploy.home}">
            <fileset dir="src/WebServerletLogic/Uploads"/>
        </copy>
        <mkdir  dir="${deploy.home}/WEB-INF"/>
        <copy  file="src/WebServerletLogic/web.xml" tofile="${deploy.home}/WEB-INF/web.xml"/>
        <mkdir  dir="${deploy.home}/WEB-INF/classes"/>
    </target>


    <!-- The "clean" target removes the deployment home directory structure,
         so that the next time the "compile" target is requested, it will need
         to compile everything from scratch.
    -->

    <target name="clean">
        <delete dir="${deploy.home}"/>
    </target>

    <target name="tomcat-restart">
        <antcall target="tomcat-stop" />
        <antcall target="tomcat-start" />
    </target>

    <!-- The "compile" target is used to compile (or recompile) the Java classes
         that make up this web application.  The recommended source code directory
         structure makes this very easy because the <javac> task automatically
         works its way down a source code hierarchy and compiles any class that
         has not yet been compiled, or where the source file is newer than the
         class file.

         Feel free to adjust the compilation option parameters (debug,
         optimize, and deprecation) to suit your requirements.  It is also
         possible to base them on properties, so that you can adjust this
         behavior at runtime.

         The "compile" task depends on the "prepare" task, so the deployment
         home directory structure will be created if needed the first time.
    -->
    <path id="compile.classpath">

        <!-- Include all JAR files that will be included in /WEB-INF/lib -->
        <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
        <!--
            <pathelement location="${foo.jar}"/>
        -->

        <!-- Include all elements that Tomcat exposes to applications -->
        <pathelement location="${catalina.home}/classes"/>
        <fileset dir="${catalina.home}/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${dist.home}/jars">
            <include name="*.jar"/>
        </fileset>

    </path>


    <target name="compile" depends="prepare">
        <javac srcdir="src" destdir="${deploy.home}/WEB-INF/classes"
               debug="on" optimize="off" deprecation="off">
            <classpath refid="compile.classpath"/>
        </javac>
    </target>
    <target name="tomcat-start">
        <java classname="org.apache.catalina.startup.Bootstrap" fork="true">
            <classpath path="${catalina.home}/bin/bootstrap.jar:${catalina.home}/bin/tomcat-juli.jar" />
            <jvmarg value="-Dcatalina.home=${catalina.home}"/>
        </java>
    </target>

    <target name="tomcat-stop">
        <java classname="org.apache.catalina.startup.Bootstrap" fork="true">
            <classpath path="${catalina.home}/bin/bootstrap.jar:${catalina.home}/bin/tomcat-juli.jar" />
            <jvmarg value="-Dcatalina.home=${catalina.home}"/>
            <arg line="stop"/>
        </java>
    </target>

    <!-- The "all" target rebuilds everything by executing the "clean"
         target first, which forces the "compile" target to compile all
         source code instead of just the files that have been changed.
    -->

    <target name="all" depends="clean,prepare,compile,tomcat-restart"/>


    <!-- The "dist" target builds the distribution Web ARchive (WAR) file
         for this application, suitable for distribution to sites that wish
         to install your application.  It also creates a JAR file containing
         the source code for this application, if you wish to distribute
         that separately.
    -->

  <target name="dist" depends="prepare,compile">
        <jar jarfile="${dist.home}/${dist.src}"
             basedir="${deploy.home}"/>
        <jar jarfile="${dist.home}/${dist.war}"
             basedir="${deploy.home}"/>
    </target>


</project>